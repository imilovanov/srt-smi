!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/d0807887/
$(ACLOCAL_M4)	deps/tclap/Makefile.in	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(srcdir)/Makefile.in	deps/tclap/Makefile.in	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(top_builddir)/config.status	deps/tclap/Makefile.in	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_srcdir)/configure	deps/tclap/Makefile.in	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
ACLOCAL	deps/tclap/Makefile.in	/^ACLOCAL = @ACLOCAL@$/;"	m
ACLOCAL_M4	deps/tclap/Makefile.in	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	deps/tclap/Makefile.in	/^AMTAR = @AMTAR@$/;"	m
ANSI	src/text_encoding_detect.h	/^    ANSI,            \/\/ 0-255$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
ASCII	src/text_encoding_detect.h	/^    ASCII,           \/\/ 0-127$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
AUTOCONF	deps/tclap/Makefile.in	/^AUTOCONF = @AUTOCONF@$/;"	m
AUTOHEADER	deps/tclap/Makefile.in	/^AUTOHEADER = @AUTOHEADER@$/;"	m
AUTOMAKE	deps/tclap/Makefile.in	/^AUTOMAKE = @AUTOMAKE@$/;"	m
AWK	deps/tclap/Makefile.in	/^AWK = @AWK@$/;"	m
Arg	deps/tclap/Arg.h	/^class Arg$/;"	c	namespace:TCLAP
Arg	deps/tclap/Arg.h	/^inline Arg::Arg(const std::string& flag,$/;"	f	class:TCLAP::Arg
ArgException	deps/tclap/ArgException.h	/^		ArgException( const std::string& text = "undefined exception", $/;"	f	class:TCLAP::ArgException
ArgException	deps/tclap/ArgException.h	/^class ArgException : public std::exception$/;"	c	namespace:TCLAP
ArgListIterator	deps/tclap/Arg.h	/^typedef std::list<Arg*>::iterator ArgListIterator;$/;"	t	namespace:TCLAP	typeref:typename:std::list<Arg * >::iterator
ArgParseException	deps/tclap/ArgException.h	/^		ArgParseException( const std::string& text = "undefined exception", $/;"	f	class:TCLAP::ArgParseException
ArgParseException	deps/tclap/ArgException.h	/^class ArgParseException : public ArgException$/;"	c	namespace:TCLAP
ArgTraits	deps/tclap/ArgTraits.h	/^struct ArgTraits {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<bool> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<char> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<double> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<float> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<int> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<long long> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<long> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<short> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<size_t> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<std::string> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<unsigned char> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<unsigned int> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<unsigned long long> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<unsigned long> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<unsigned short> {$/;"	s	namespace:TCLAP
ArgTraits	deps/tclap/StandardTraits.h	/^struct ArgTraits<wchar_t> {$/;"	s	namespace:TCLAP
ArgVectorIterator	deps/tclap/Arg.h	/^typedef std::vector<Arg*>::iterator ArgVectorIterator;$/;"	t	namespace:TCLAP	typeref:typename:std::vector<Arg * >::iterator
AutoIt	src/text_encoding_detect.h	/^namespace AutoIt {$/;"	n
CONFIG_CLEAN_FILES	deps/tclap/Makefile.in	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_HEADER	deps/tclap/Makefile.in	/^CONFIG_HEADER = $(top_builddir)\/config\/config.h$/;"	m
CONVERTER_H_	src/Converter.h	/^#define CONVERTER_H_$/;"	d
CPPFLAGS	deps/tclap/Makefile.in	/^CPPFLAGS = @CPPFLAGS@$/;"	m
CTAGS	deps/tclap/Makefile.in	/^CTAGS = ctags$/;"	m
CTAGS	deps/tclap/Makefile.in	/^CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\$/;"	t
CXX	deps/tclap/Makefile.in	/^CXX = @CXX@$/;"	m
CXXCPP	deps/tclap/Makefile.in	/^CXXCPP = @CXXCPP@$/;"	m
CXXDEPMODE	deps/tclap/Makefile.in	/^CXXDEPMODE = @CXXDEPMODE@$/;"	m
CXXFLAGS	deps/tclap/Makefile.in	/^CXXFLAGS = @CXXFLAGS@$/;"	m
CYGPATH_W	deps/tclap/Makefile.in	/^CYGPATH_W = @CYGPATH_W@$/;"	m
CheckBOM	src/text_encoding_detect.cpp	/^TextEncodingDetect::Encoding TextEncodingDetect::CheckBOM($/;"	f	class:TextEncodingDetect	typeref:typename:TextEncodingDetect::Encoding
CheckUTF16ASCII	src/text_encoding_detect.cpp	/^TextEncodingDetect::Encoding TextEncodingDetect::CheckUTF16ASCII($/;"	f	class:TextEncodingDetect	typeref:typename:TextEncodingDetect::Encoding
CheckUTF16NewlineChars	src/text_encoding_detect.cpp	/^TextEncodingDetect::Encoding TextEncodingDetect::CheckUTF16NewlineChars($/;"	f	class:TextEncodingDetect	typeref:typename:TextEncodingDetect::Encoding
CheckUTF8	src/text_encoding_detect.cpp	/^TextEncodingDetect::Encoding TextEncodingDetect::CheckUTF8($/;"	f	class:TextEncodingDetect	typeref:typename:TextEncodingDetect::Encoding
ClearContainer	deps/tclap/CmdLine.h	/^template<typename C> void ClearContainer(C &c)$/;"	f	namespace:TCLAP	typeref:typename:void
CmdLine	deps/tclap/CmdLine.h	/^class CmdLine : public CmdLineInterface$/;"	c	namespace:TCLAP
CmdLine	deps/tclap/CmdLine.h	/^inline CmdLine::CmdLine(const std::string& m,$/;"	f	class:TCLAP::CmdLine
CmdLineInterface	deps/tclap/CmdLineInterface.h	/^class CmdLineInterface$/;"	c	namespace:TCLAP
CmdLineOutput	deps/tclap/CmdLineOutput.h	/^class CmdLineOutput $/;"	c	namespace:TCLAP
CmdLineParseException	deps/tclap/ArgException.h	/^		CmdLineParseException( const std::string& text = "undefined exception", $/;"	f	class:TCLAP::CmdLineParseException
CmdLineParseException	deps/tclap/ArgException.h	/^class CmdLineParseException : public ArgException$/;"	c	namespace:TCLAP
Constraint	deps/tclap/Constraint.h	/^class Constraint$/;"	c	namespace:TCLAP
Converter	src/Converter.cpp	/^Converter::Converter(int timeOffsetMs, const string& outputDir, bool quiet,$/;"	f	class:Converter
Converter	src/Converter.h	/^class Converter {$/;"	c
DEFS	deps/tclap/Makefile.in	/^DEFS = @DEFS@$/;"	m
DEPDIR	deps/tclap/Makefile.in	/^DEPDIR = @DEPDIR@$/;"	m
DIR_SEPARATOR	src/Converter.cpp	/^#define DIR_SEPARATOR /;"	d	file:
DISTFILES	deps/tclap/Makefile.in	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	deps/tclap/Makefile.in	/^DIST_COMMON = $(libtclapinclude_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	deps/tclap/Makefile.in	/^DIST_SOURCES =$/;"	m
DOT	deps/tclap/Makefile.in	/^DOT = @DOT@$/;"	m
DOXYGEN	deps/tclap/Makefile.in	/^DOXYGEN = @DOXYGEN@$/;"	m
DelPtr	deps/tclap/CmdLine.h	/^template<typename T> void DelPtr(T ptr)$/;"	f	namespace:TCLAP	typeref:typename:void
DetectEncoding	src/text_encoding_detect.cpp	/^TextEncodingDetect::Encoding TextEncodingDetect::DetectEncoding($/;"	f	class:TextEncodingDetect	typeref:typename:TextEncodingDetect::Encoding
DocBookOutput	deps/tclap/DocBookOutput.h	/^class DocBookOutput : public CmdLineOutput$/;"	c	namespace:TCLAP
DoesContainNulls	src/text_encoding_detect.cpp	/^bool TextEncodingDetect::DoesContainNulls(const unsigned char *pBuffer,$/;"	f	class:TextEncodingDetect	typeref:typename:bool
ECHO_C	deps/tclap/Makefile.in	/^ECHO_C = @ECHO_C@$/;"	m
ECHO_N	deps/tclap/Makefile.in	/^ECHO_N = @ECHO_N@$/;"	m
ECHO_T	deps/tclap/Makefile.in	/^ECHO_T = @ECHO_T@$/;"	m
EGREP	deps/tclap/Makefile.in	/^EGREP = @EGREP@$/;"	m
ETAGS	deps/tclap/Makefile.in	/^ETAGS = etags$/;"	m
EXEEXT	deps/tclap/Makefile.in	/^EXEEXT = @EXEEXT@$/;"	m
Encoding	src/text_encoding_detect.h	/^  enum Encoding {$/;"	g	class:AutoIt::TextEncodingDetect
ExitException	deps/tclap/ArgException.h	/^	ExitException(int estat) : _estat(estat) {}$/;"	f	class:TCLAP::ExitException
ExitException	deps/tclap/ArgException.h	/^class ExitException {$/;"	c	namespace:TCLAP
ExtractValue	deps/tclap/Arg.h	/^ExtractValue(T &destVal, const std::string& strVal, StringLike sl)$/;"	f	namespace:TCLAP	typeref:typename:void
ExtractValue	deps/tclap/Arg.h	/^ExtractValue(T &destVal, const std::string& strVal, ValueLike vl)$/;"	f	namespace:TCLAP	typeref:typename:void
FILE_TEST_SIZE	src/Utils.cpp	/^#define FILE_TEST_SIZE /;"	d	file:
GREP	deps/tclap/Makefile.in	/^GREP = @GREP@$/;"	m
GTAGS	deps/tclap/Makefile.in	/^GTAGS:$/;"	t
GetBOMLengthFromEncodingMode	src/text_encoding_detect.cpp	/^int TextEncodingDetect::GetBOMLengthFromEncodingMode(Encoding encoding) {$/;"	f	class:TextEncodingDetect	typeref:typename:int
HAVE_SSTREAM	deps/tclap/Arg.h	/^#define HAVE_SSTREAM$/;"	d
HAVE_SSTREAM	deps/tclap/ValuesConstraint.h	/^#define HAVE_SSTREAM$/;"	d
HEADERS	deps/tclap/Makefile.in	/^HEADERS = $(libtclapinclude_HEADERS)$/;"	m
HelpVisitor	deps/tclap/HelpVisitor.h	/^		HelpVisitor(CmdLineInterface* cmd, CmdLineOutput** out) $/;"	f	class:TCLAP::HelpVisitor
HelpVisitor	deps/tclap/HelpVisitor.h	/^class HelpVisitor: public Visitor$/;"	c	namespace:TCLAP
ID	deps/tclap/Makefile.in	/^ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)$/;"	t
INSTALL	deps/tclap/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL_DATA	deps/tclap/Makefile.in	/^INSTALL_DATA = @INSTALL_DATA@$/;"	m
INSTALL_HEADER	deps/tclap/Makefile.in	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	deps/tclap/Makefile.in	/^INSTALL_PROGRAM = @INSTALL_PROGRAM@$/;"	m
INSTALL_SCRIPT	deps/tclap/Makefile.in	/^INSTALL_SCRIPT = @INSTALL_SCRIPT@$/;"	m
INSTALL_STRIP_PROGRAM	deps/tclap/Makefile.in	/^INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@$/;"	m
IgnoreRestVisitor	deps/tclap/IgnoreRestVisitor.h	/^		IgnoreRestVisitor() : Visitor() {}$/;"	f	class:TCLAP::IgnoreRestVisitor
IgnoreRestVisitor	deps/tclap/IgnoreRestVisitor.h	/^class IgnoreRestVisitor: public Visitor$/;"	c	namespace:TCLAP
LDFLAGS	deps/tclap/Makefile.in	/^LDFLAGS = @LDFLAGS@$/;"	m
LIBOBJS	deps/tclap/Makefile.in	/^LIBOBJS = @LIBOBJS@$/;"	m
LIBS	deps/tclap/Makefile.in	/^LIBS = @LIBS@$/;"	m
LTLIBOBJS	deps/tclap/Makefile.in	/^LTLIBOBJS = @LTLIBOBJS@$/;"	m
MAKEINFO	deps/tclap/Makefile.in	/^MAKEINFO = @MAKEINFO@$/;"	m
MKDIR_P	deps/tclap/Makefile.in	/^MKDIR_P = @MKDIR_P@$/;"	m
Makefile	deps/tclap/Makefile.in	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
MultiArg	deps/tclap/MultiArg.h	/^MultiArg<T>::MultiArg(const std::string& flag, $/;"	f	class:TCLAP::MultiArg
MultiArg	deps/tclap/MultiArg.h	/^class MultiArg : public Arg$/;"	c	namespace:TCLAP
MultiSwitchArg	deps/tclap/MultiSwitchArg.h	/^class MultiSwitchArg : public SwitchArg$/;"	c	namespace:TCLAP
MultiSwitchArg	deps/tclap/MultiSwitchArg.h	/^inline MultiSwitchArg::MultiSwitchArg(const std::string& flag,$/;"	f	class:TCLAP::MultiSwitchArg
NORMAL_INSTALL	deps/tclap/Makefile.in	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	deps/tclap/Makefile.in	/^NORMAL_UNINSTALL = :$/;"	m
None	src/text_encoding_detect.h	/^    None,            \/\/ Unknown or binary$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
OBJEXT	deps/tclap/Makefile.in	/^OBJEXT = @OBJEXT@$/;"	m
OptionalUnlabeledTracker	deps/tclap/OptionalUnlabeledTracker.h	/^class OptionalUnlabeledTracker$/;"	c	namespace:TCLAP
PACKAGE	deps/tclap/Makefile.in	/^PACKAGE = @PACKAGE@$/;"	m
PACKAGE_BUGREPORT	deps/tclap/Makefile.in	/^PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@$/;"	m
PACKAGE_NAME	deps/tclap/Makefile.in	/^PACKAGE_NAME = @PACKAGE_NAME@$/;"	m
PACKAGE_STRING	deps/tclap/Makefile.in	/^PACKAGE_STRING = @PACKAGE_STRING@$/;"	m
PACKAGE_TARNAME	deps/tclap/Makefile.in	/^PACKAGE_TARNAME = @PACKAGE_TARNAME@$/;"	m
PACKAGE_VERSION	deps/tclap/Makefile.in	/^PACKAGE_VERSION = @PACKAGE_VERSION@$/;"	m
PATH_SEPARATOR	deps/tclap/Makefile.in	/^PATH_SEPARATOR = @PATH_SEPARATOR@$/;"	m
POST_INSTALL	deps/tclap/Makefile.in	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	deps/tclap/Makefile.in	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	deps/tclap/Makefile.in	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	deps/tclap/Makefile.in	/^PRE_UNINSTALL = :$/;"	m
RANLIB	deps/tclap/Makefile.in	/^RANLIB = @RANLIB@$/;"	m
SET_MAKE	deps/tclap/Makefile.in	/^SET_MAKE = @SET_MAKE@$/;"	m
SHELL	deps/tclap/Makefile.in	/^SHELL = @SHELL@$/;"	m
SOURCES	deps/tclap/Makefile.in	/^SOURCES =$/;"	m
STRIP	deps/tclap/Makefile.in	/^STRIP = @STRIP@$/;"	m
SetNullSuggestsBinary	src/text_encoding_detect.h	/^  void SetNullSuggestsBinary(bool null_suggests_binary) {$/;"	f	class:AutoIt::TextEncodingDetect	typeref:typename:void
SetString	deps/tclap/StandardTraits.h	/^void SetString(T &dst, const std::string &src)$/;"	f	namespace:TCLAP	typeref:typename:void
SetUtf16ExpectedNullPercent	src/text_encoding_detect.cpp	/^void TextEncodingDetect::SetUtf16ExpectedNullPercent(int percent) {$/;"	f	class:TextEncodingDetect	typeref:typename:void
SetUtf16UnexpectedNullPercent	src/text_encoding_detect.cpp	/^void TextEncodingDetect::SetUtf16UnexpectedNullPercent(int percent) {$/;"	f	class:TextEncodingDetect	typeref:typename:void
SpecificationException	deps/tclap/ArgException.h	/^		SpecificationException( const std::string& text = "undefined exception",$/;"	f	class:TCLAP::SpecificationException
SpecificationException	deps/tclap/ArgException.h	/^class SpecificationException : public ArgException$/;"	c	namespace:TCLAP
StdOutput	deps/tclap/StdOutput.h	/^class StdOutput : public CmdLineOutput$/;"	c	namespace:TCLAP
StringLike	deps/tclap/ArgTraits.h	/^struct StringLike {$/;"	s	namespace:TCLAP
StringLikeTrait	deps/tclap/ArgTraits.h	/^struct StringLikeTrait {$/;"	s	namespace:TCLAP
SwitchArg	deps/tclap/SwitchArg.h	/^class SwitchArg : public Arg$/;"	c	namespace:TCLAP
SwitchArg	deps/tclap/SwitchArg.h	/^inline SwitchArg::SwitchArg(const std::string& flag, $/;"	f	class:TCLAP::SwitchArg
TAGS	deps/tclap/Makefile.in	/^TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\$/;"	t
TCLAP	deps/tclap/Arg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/ArgException.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/ArgTraits.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/CmdLine.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/CmdLineInterface.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/CmdLineOutput.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/Constraint.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/DocBookOutput.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/HelpVisitor.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/IgnoreRestVisitor.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/MultiArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/MultiSwitchArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/OptionalUnlabeledTracker.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/StandardTraits.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/StdOutput.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/SwitchArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/UnlabeledMultiArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/UnlabeledValueArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/ValueArg.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/ValuesConstraint.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/VersionVisitor.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/Visitor.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/XorHandler.h	/^namespace TCLAP {$/;"	n
TCLAP	deps/tclap/ZshCompletionOutput.h	/^namespace TCLAP {$/;"	n
TCLAP_ARGTRAITS_H	deps/tclap/ArgTraits.h	/^#define TCLAP_ARGTRAITS_H$/;"	d
TCLAP_ARGUMENT_H	deps/tclap/Arg.h	/^#define TCLAP_ARGUMENT_H$/;"	d
TCLAP_ARG_EXCEPTION_H	deps/tclap/ArgException.h	/^#define TCLAP_ARG_EXCEPTION_H$/;"	d
TCLAP_CMDLINEOUTPUT_H	deps/tclap/CmdLineOutput.h	/^#define TCLAP_CMDLINEOUTPUT_H$/;"	d
TCLAP_CMDLINE_H	deps/tclap/CmdLine.h	/^#define TCLAP_CMDLINE_H$/;"	d
TCLAP_COMMANDLINE_INTERFACE_H	deps/tclap/CmdLineInterface.h	/^#define TCLAP_COMMANDLINE_INTERFACE_H$/;"	d
TCLAP_CONSTRAINT_H	deps/tclap/Constraint.h	/^#define TCLAP_CONSTRAINT_H$/;"	d
TCLAP_DOCBOOKOUTPUT_H	deps/tclap/DocBookOutput.h	/^#define TCLAP_DOCBOOKOUTPUT_H$/;"	d
TCLAP_DONT_DECLARE_WCHAR_T_ARGTRAITS	deps/tclap/StandardTraits.h	/^#define TCLAP_DONT_DECLARE_WCHAR_T_ARGTRAITS$/;"	d
TCLAP_FLAGSTARTCHAR	deps/tclap/Arg.h	/^#define TCLAP_FLAGSTARTCHAR /;"	d
TCLAP_FLAGSTARTSTRING	deps/tclap/Arg.h	/^#define TCLAP_FLAGSTARTSTRING /;"	d
TCLAP_HELP_VISITOR_H	deps/tclap/HelpVisitor.h	/^#define TCLAP_HELP_VISITOR_H$/;"	d
TCLAP_IGNORE_REST_VISITOR_H	deps/tclap/IgnoreRestVisitor.h	/^#define TCLAP_IGNORE_REST_VISITOR_H$/;"	d
TCLAP_MULTIPLE_ARGUMENT_H	deps/tclap/MultiArg.h	/^#define TCLAP_MULTIPLE_ARGUMENT_H$/;"	d
TCLAP_MULTIPLE_UNLABELED_ARGUMENT_H	deps/tclap/UnlabeledMultiArg.h	/^#define TCLAP_MULTIPLE_UNLABELED_ARGUMENT_H$/;"	d
TCLAP_MULTI_SWITCH_ARG_H	deps/tclap/MultiSwitchArg.h	/^#define TCLAP_MULTI_SWITCH_ARG_H$/;"	d
TCLAP_NAMESTARTSTRING	deps/tclap/Arg.h	/^#define TCLAP_NAMESTARTSTRING /;"	d
TCLAP_OPTIONAL_UNLABELED_TRACKER_H	deps/tclap/OptionalUnlabeledTracker.h	/^#define TCLAP_OPTIONAL_UNLABELED_TRACKER_H$/;"	d
TCLAP_STANDARD_TRAITS_H	deps/tclap/StandardTraits.h	/^#define TCLAP_STANDARD_TRAITS_H$/;"	d
TCLAP_STDCMDLINEOUTPUT_H	deps/tclap/StdOutput.h	/^#define TCLAP_STDCMDLINEOUTPUT_H$/;"	d
TCLAP_SWITCH_ARG_H	deps/tclap/SwitchArg.h	/^#define TCLAP_SWITCH_ARG_H$/;"	d
TCLAP_UNLABELED_VALUE_ARGUMENT_H	deps/tclap/UnlabeledValueArg.h	/^#define TCLAP_UNLABELED_VALUE_ARGUMENT_H$/;"	d
TCLAP_VALUESCONSTRAINT_H	deps/tclap/ValuesConstraint.h	/^#define TCLAP_VALUESCONSTRAINT_H$/;"	d
TCLAP_VALUE_ARGUMENT_H	deps/tclap/ValueArg.h	/^#define TCLAP_VALUE_ARGUMENT_H$/;"	d
TCLAP_VERSION_VISITOR_H	deps/tclap/VersionVisitor.h	/^#define TCLAP_VERSION_VISITOR_H$/;"	d
TCLAP_VISITOR_H	deps/tclap/Visitor.h	/^#define TCLAP_VISITOR_H$/;"	d
TCLAP_XORHANDLER_H	deps/tclap/XorHandler.h	/^#define TCLAP_XORHANDLER_H$/;"	d
TCLAP_ZSHCOMPLETIONOUTPUT_H	deps/tclap/ZshCompletionOutput.h	/^#define TCLAP_ZSHCOMPLETIONOUTPUT_H$/;"	d
TEXT_ENCODING_DETECT_H_	src/text_encoding_detect.h	/^#define TEXT_ENCODING_DETECT_H_$/;"	d
TextEncodingDetect	src/text_encoding_detect.cpp	/^TextEncodingDetect::TextEncodingDetect() {$/;"	f	class:TextEncodingDetect
TextEncodingDetect	src/text_encoding_detect.h	/^class TextEncodingDetect {$/;"	c	namespace:AutoIt
TextEncodingDetect_UTF16_BOM_BE	src/text_encoding_detect.cpp	/^static const unsigned char TextEncodingDetect_UTF16_BOM_BE[] = {$/;"	v	typeref:typename:const unsigned char[]	file:
TextEncodingDetect_UTF16_BOM_LE	src/text_encoding_detect.cpp	/^static const unsigned char TextEncodingDetect_UTF16_BOM_LE[] = {$/;"	v	typeref:typename:const unsigned char[]	file:
TextEncodingDetect_UTF8_BOM	src/text_encoding_detect.cpp	/^static const unsigned char TextEncodingDetect_UTF8_BOM[] = {$/;"	v	typeref:typename:const unsigned char[]	file:
UTF16_BE_BOM	src/text_encoding_detect.h	/^    UTF16_BE_BOM,    \/\/ UTF16-BE with BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTF16_BE_NOBOM	src/text_encoding_detect.h	/^    UTF16_BE_NOBOM,  \/\/ UTF16-BE without BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTF16_LE_BOM	src/text_encoding_detect.h	/^    UTF16_LE_BOM,    \/\/ UTF16 LE with BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTF16_LE_NOBOM	src/text_encoding_detect.h	/^    UTF16_LE_NOBOM,  \/\/ UTF16 LE without BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTF8_BOM	src/text_encoding_detect.h	/^    UTF8_BOM,        \/\/ UTF8 with BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTF8_NOBOM	src/text_encoding_detect.h	/^    UTF8_NOBOM,      \/\/ UTF8 without BOM$/;"	e	enum:AutoIt::TextEncodingDetect::Encoding
UTILS_H_	src/Utils.h	/^#define UTILS_H_$/;"	d
UnlabeledMultiArg	deps/tclap/UnlabeledMultiArg.h	/^UnlabeledMultiArg<T>::UnlabeledMultiArg(const std::string& name, $/;"	f	class:TCLAP::UnlabeledMultiArg
UnlabeledMultiArg	deps/tclap/UnlabeledMultiArg.h	/^class UnlabeledMultiArg : public MultiArg<T>$/;"	c	namespace:TCLAP
UnlabeledValueArg	deps/tclap/UnlabeledValueArg.h	/^UnlabeledValueArg<T>::UnlabeledValueArg(const std::string& name, $/;"	f	class:TCLAP::UnlabeledValueArg
UnlabeledValueArg	deps/tclap/UnlabeledValueArg.h	/^class UnlabeledValueArg : public ValueArg<T>$/;"	c	namespace:TCLAP
Utils	src/Utils.h	/^class Utils {$/;"	c
VERSION	deps/tclap/Makefile.in	/^VERSION = @VERSION@$/;"	m
VPATH	deps/tclap/Makefile.in	/^VPATH = @srcdir@$/;"	m
ValueArg	deps/tclap/ValueArg.h	/^ValueArg<T>::ValueArg(const std::string& flag, $/;"	f	class:TCLAP::ValueArg
ValueArg	deps/tclap/ValueArg.h	/^class ValueArg : public Arg $/;"	c	namespace:TCLAP
ValueCategory	deps/tclap/ArgTraits.h	/^    typedef StringLike ValueCategory;$/;"	t	struct:TCLAP::StringLikeTrait	typeref:typename:StringLike
ValueCategory	deps/tclap/ArgTraits.h	/^    typedef ValueLike ValueCategory;$/;"	t	struct:TCLAP::ValueLike	typeref:typename:ValueLike
ValueCategory	deps/tclap/ArgTraits.h	/^    typedef ValueLike ValueCategory;$/;"	t	struct:TCLAP::ValueLikeTrait	typeref:typename:ValueLike
ValueCategory	deps/tclap/ArgTraits.h	/^    typedef typename T::ValueCategory ValueCategory;$/;"	t	struct:TCLAP::ArgTraits	typeref:typename:T::ValueCategory
ValueCategory	deps/tclap/StandardTraits.h	/^    typedef StringLike ValueCategory;$/;"	t	struct:TCLAP::ArgTraits	typeref:typename:StringLike
ValueCategory	deps/tclap/StandardTraits.h	/^    typedef ValueLike ValueCategory;$/;"	t	struct:TCLAP::ArgTraits	typeref:typename:ValueLike
ValueLike	deps/tclap/ArgTraits.h	/^struct ValueLike {$/;"	s	namespace:TCLAP
ValueLikeTrait	deps/tclap/ArgTraits.h	/^struct ValueLikeTrait {$/;"	s	namespace:TCLAP
ValuesConstraint	deps/tclap/ValuesConstraint.h	/^ValuesConstraint<T>::ValuesConstraint(std::vector<T>& allowed)$/;"	f	class:TCLAP::ValuesConstraint
ValuesConstraint	deps/tclap/ValuesConstraint.h	/^class ValuesConstraint : public Constraint<T>$/;"	c	namespace:TCLAP
VersionVisitor	deps/tclap/VersionVisitor.h	/^		VersionVisitor( CmdLineInterface* cmd, CmdLineOutput** out ) $/;"	f	class:TCLAP::VersionVisitor
VersionVisitor	deps/tclap/VersionVisitor.h	/^class VersionVisitor: public Visitor$/;"	c	namespace:TCLAP
Visitor	deps/tclap/Visitor.h	/^		Visitor() { }$/;"	f	class:TCLAP::Visitor
Visitor	deps/tclap/Visitor.h	/^class Visitor$/;"	c	namespace:TCLAP
VisitorListIterator	deps/tclap/Arg.h	/^typedef std::list<Visitor*>::iterator VisitorListIterator;$/;"	t	namespace:TCLAP	typeref:typename:std::list<Visitor * >::iterator
WARN_EFFECTIVE_CXX	deps/tclap/Makefile.in	/^WARN_EFFECTIVE_CXX = @WARN_EFFECTIVE_CXX@$/;"	m
WARN_NO_EFFECTIVE_CXX	deps/tclap/Makefile.in	/^WARN_NO_EFFECTIVE_CXX = @WARN_NO_EFFECTIVE_CXX@$/;"	m
XorHandler	deps/tclap/XorHandler.h	/^		XorHandler( ) : _orList(std::vector< std::vector<Arg*> >()) {}$/;"	f	class:TCLAP::XorHandler
XorHandler	deps/tclap/XorHandler.h	/^class XorHandler$/;"	c	namespace:TCLAP
ZshCompletionOutput	deps/tclap/ZshCompletionOutput.h	/^ZshCompletionOutput::ZshCompletionOutput()$/;"	f	class:TCLAP::ZshCompletionOutput
ZshCompletionOutput	deps/tclap/ZshCompletionOutput.h	/^class ZshCompletionOutput : public CmdLineOutput$/;"	c	namespace:TCLAP
_acceptsMultipleValues	deps/tclap/Arg.h	/^		bool _acceptsMultipleValues;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
_allowMore	deps/tclap/MultiArg.h	/^	bool _allowMore;$/;"	m	class:TCLAP::MultiArg	typeref:typename:bool
_allowed	deps/tclap/ValuesConstraint.h	/^		std::vector<T> _allowed;$/;"	m	class:TCLAP::ValuesConstraint	typeref:typename:std::vector<T>
_alreadySet	deps/tclap/Arg.h	/^		bool _alreadySet;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
_argDeleteOnExitList	deps/tclap/CmdLine.h	/^		std::list<Arg*> _argDeleteOnExitList;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::list<Arg * >
_argId	deps/tclap/ArgException.h	/^		std::string _argId;$/;"	m	class:TCLAP::ArgException	typeref:typename:std::string
_argList	deps/tclap/CmdLine.h	/^		std::list<Arg*> _argList;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::list<Arg * >
_checkWithVisitor	deps/tclap/Arg.h	/^inline void Arg::_checkWithVisitor() const$/;"	f	class:TCLAP::Arg	typeref:typename:void
_cmd	deps/tclap/HelpVisitor.h	/^		CmdLineInterface* _cmd;$/;"	m	class:TCLAP::HelpVisitor	typeref:typename:CmdLineInterface *
_cmd	deps/tclap/VersionVisitor.h	/^		CmdLineInterface* _cmd;$/;"	m	class:TCLAP::VersionVisitor	typeref:typename:CmdLineInterface *
_constraint	deps/tclap/MultiArg.h	/^	Constraint<T>* _constraint;$/;"	m	class:TCLAP::MultiArg	typeref:typename:Constraint<T> *
_constraint	deps/tclap/ValueArg.h	/^        Constraint<T>* _constraint;$/;"	m	class:TCLAP::ValueArg	typeref:typename:Constraint<T> *
_constructor	deps/tclap/CmdLine.h	/^inline void CmdLine::_constructor()$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
_default	deps/tclap/MultiSwitchArg.h	/^		int _default;$/;"	m	class:TCLAP::MultiSwitchArg	typeref:typename:int
_default	deps/tclap/SwitchArg.h	/^        bool _default;$/;"	m	class:TCLAP::SwitchArg	typeref:typename:bool
_default	deps/tclap/ValueArg.h	/^        T _default;$/;"	m	class:TCLAP::ValueArg	typeref:typename:T
_delimiter	deps/tclap/CmdLine.h	/^		char _delimiter;$/;"	m	class:TCLAP::CmdLine	typeref:typename:char
_description	deps/tclap/Arg.h	/^		std::string _description;$/;"	m	class:TCLAP::Arg	typeref:typename:std::string
_emptyCombined	deps/tclap/CmdLine.h	/^inline bool CmdLine::_emptyCombined(const std::string& s)$/;"	f	class:TCLAP::CmdLine	typeref:typename:bool
_errorText	deps/tclap/ArgException.h	/^		std::string _errorText;$/;"	m	class:TCLAP::ArgException	typeref:typename:std::string
_estat	deps/tclap/ArgException.h	/^	int _estat;$/;"	m	class:TCLAP::ExitException	typeref:typename:int
_extractValue	deps/tclap/MultiArg.h	/^void MultiArg<T>::_extractValue( const std::string& val ) $/;"	f	class:TCLAP::MultiArg	typeref:typename:void
_extractValue	deps/tclap/ValueArg.h	/^void ValueArg<T>::_extractValue( const std::string& val ) $/;"	f	class:TCLAP::ValueArg	typeref:typename:void
_flag	deps/tclap/Arg.h	/^		std::string _flag;$/;"	m	class:TCLAP::Arg	typeref:typename:std::string
_handleExceptions	deps/tclap/CmdLine.h	/^		bool _handleExceptions;$/;"	m	class:TCLAP::CmdLine	typeref:typename:bool
_hasBlanks	deps/tclap/Arg.h	/^inline bool Arg::_hasBlanks( const std::string& s ) const$/;"	f	class:TCLAP::Arg	typeref:typename:bool
_helpAndVersion	deps/tclap/CmdLine.h	/^		bool _helpAndVersion;$/;"	m	class:TCLAP::CmdLine	typeref:typename:bool
_ignoreable	deps/tclap/Arg.h	/^		bool _ignoreable;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
_longUsage	deps/tclap/StdOutput.h	/^StdOutput::_longUsage( CmdLineInterface& _cmd, $/;"	f	class:TCLAP::StdOutput	typeref:typename:void
_message	deps/tclap/CmdLine.h	/^		std::string _message;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::string
_name	deps/tclap/Arg.h	/^		std::string _name;$/;"	m	class:TCLAP::Arg	typeref:typename:std::string
_numRequired	deps/tclap/CmdLine.h	/^		int _numRequired;$/;"	m	class:TCLAP::CmdLine	typeref:typename:int
_orList	deps/tclap/XorHandler.h	/^		std::vector< std::vector<Arg*> > _orList;$/;"	m	class:TCLAP::XorHandler	typeref:typename:std::vector<std::vector<Arg * >>
_out	deps/tclap/HelpVisitor.h	/^		CmdLineOutput** _out;$/;"	m	class:TCLAP::HelpVisitor	typeref:typename:CmdLineOutput **
_out	deps/tclap/VersionVisitor.h	/^		CmdLineOutput** _out;$/;"	m	class:TCLAP::VersionVisitor	typeref:typename:CmdLineOutput **
_output	deps/tclap/CmdLine.h	/^		CmdLineOutput* _output;$/;"	m	class:TCLAP::CmdLine	typeref:typename:CmdLineOutput *
_outputDir	src/Converter.h	/^  std::string _outputDir;  \/\/ The directory in which the converted .smi files$/;"	m	class:Converter	typeref:typename:std::string
_progName	deps/tclap/CmdLine.h	/^		std::string _progName;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::string
_quiet	src/Converter.h	/^  bool _quiet;             \/\/ If true, prevents printing to the console$/;"	m	class:Converter	typeref:typename:bool
_requireLabel	deps/tclap/Arg.h	/^		std::string _requireLabel;$/;"	m	class:TCLAP::Arg	typeref:typename:std::string
_required	deps/tclap/Arg.h	/^		bool _required;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
_shortUsage	deps/tclap/StdOutput.h	/^StdOutput::_shortUsage( CmdLineInterface& _cmd, $/;"	f	class:TCLAP::StdOutput	typeref:typename:void
_timeOffsetMs	src/Converter.h	/^  int _timeOffsetMs;       \/\/ The timing offset in milliseconds$/;"	m	class:Converter	typeref:typename:int
_typeDesc	deps/tclap/MultiArg.h	/^	std::string _typeDesc;$/;"	m	class:TCLAP::MultiArg	typeref:typename:std::string
_typeDesc	deps/tclap/ValueArg.h	/^        std::string _typeDesc;$/;"	m	class:TCLAP::ValueArg	typeref:typename:std::string
_typeDesc	deps/tclap/ValuesConstraint.h	/^		std::string _typeDesc;$/;"	m	class:TCLAP::ValuesConstraint	typeref:typename:std::string
_typeDescription	deps/tclap/ArgException.h	/^		std::string _typeDescription;$/;"	m	class:TCLAP::ArgException	typeref:typename:std::string
_userSetOutput	deps/tclap/CmdLine.h	/^		bool _userSetOutput;$/;"	m	class:TCLAP::CmdLine	typeref:typename:bool
_value	deps/tclap/MultiSwitchArg.h	/^		int _value;$/;"	m	class:TCLAP::MultiSwitchArg	typeref:typename:int
_value	deps/tclap/SwitchArg.h	/^		bool _value;$/;"	m	class:TCLAP::SwitchArg	typeref:typename:bool
_value	deps/tclap/ValueArg.h	/^        T _value;$/;"	m	class:TCLAP::ValueArg	typeref:typename:T
_valueRequired	deps/tclap/Arg.h	/^		bool _valueRequired;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
_values	deps/tclap/MultiArg.h	/^	std::vector<T> _values;$/;"	m	class:TCLAP::MultiArg	typeref:typename:std::vector<T>
_verbose	src/Converter.h	/^  bool _verbose;  \/\/ If true, extra information will be printed to the console$/;"	m	class:Converter	typeref:typename:bool
_version	deps/tclap/CmdLine.h	/^		std::string _version;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::string
_visitor	deps/tclap/Arg.h	/^		Visitor* _visitor;$/;"	m	class:TCLAP::Arg	typeref:typename:Visitor *
_visitorDeleteOnExitList	deps/tclap/CmdLine.h	/^		std::list<Visitor*> _visitorDeleteOnExitList;$/;"	m	class:TCLAP::CmdLine	typeref:typename:std::list<Visitor * >
_xorHandler	deps/tclap/CmdLine.h	/^		XorHandler _xorHandler;$/;"	m	class:TCLAP::CmdLine	typeref:typename:XorHandler
_xorSet	deps/tclap/Arg.h	/^		bool _xorSet;$/;"	m	class:TCLAP::Arg	typeref:typename:bool
abs_builddir	deps/tclap/Makefile.in	/^abs_builddir = @abs_builddir@$/;"	m
abs_srcdir	deps/tclap/Makefile.in	/^abs_srcdir = @abs_srcdir@$/;"	m
abs_top_builddir	deps/tclap/Makefile.in	/^abs_top_builddir = @abs_top_builddir@$/;"	m
abs_top_srcdir	deps/tclap/Makefile.in	/^abs_top_srcdir = @abs_top_srcdir@$/;"	m
ac_ct_CXX	deps/tclap/Makefile.in	/^ac_ct_CXX = @ac_ct_CXX@$/;"	m
acceptsMultipleValues	deps/tclap/Arg.h	/^inline bool Arg::acceptsMultipleValues()$/;"	f	class:TCLAP::Arg	typeref:typename:bool
add	deps/tclap/CmdLine.h	/^inline void CmdLine::add( Arg& a )$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
add	deps/tclap/CmdLine.h	/^inline void CmdLine::add( Arg* a )$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
add	deps/tclap/XorHandler.h	/^inline void XorHandler::add( std::vector<Arg*>& ors )$/;"	f	class:TCLAP::XorHandler	typeref:typename:void
addToList	deps/tclap/Arg.h	/^inline void Arg::addToList( std::list<Arg*>& argList ) const$/;"	f	class:TCLAP::Arg	typeref:typename:void
addToList	deps/tclap/UnlabeledMultiArg.h	/^void UnlabeledMultiArg<T>::addToList( std::list<Arg*>& argList ) const$/;"	f	class:TCLAP::UnlabeledMultiArg	typeref:typename:void
addToList	deps/tclap/UnlabeledValueArg.h	/^void UnlabeledValueArg<T>::addToList( std::list<Arg*>& argList ) const$/;"	f	class:TCLAP::UnlabeledValueArg	typeref:typename:void
all	deps/tclap/Makefile.in	/^all: all-am$/;"	t
all-am	deps/tclap/Makefile.in	/^all-am: Makefile $(HEADERS)$/;"	t
allowMore	deps/tclap/Arg.h	/^inline bool Arg::allowMore()$/;"	f	class:TCLAP::Arg	typeref:typename:bool
allowMore	deps/tclap/MultiArg.h	/^bool MultiArg<T>::allowMore()$/;"	f	class:TCLAP::MultiArg	typeref:typename:bool
alreadyOptional	deps/tclap/OptionalUnlabeledTracker.h	/^		static bool& alreadyOptional() { return alreadyOptionalRef(); } $/;"	f	class:TCLAP::OptionalUnlabeledTracker	typeref:typename:bool &
alreadyOptionalRef	deps/tclap/OptionalUnlabeledTracker.h	/^		static bool& alreadyOptionalRef() { static bool ct = false; return ct; }$/;"	f	class:TCLAP::OptionalUnlabeledTracker	typeref:typename:bool &
am__aclocal_m4_deps	deps/tclap/Makefile.in	/^am__aclocal_m4_deps = $(top_srcdir)\/config\/ac_cxx_have_long_long.m4 \\$/;"	m
am__cd	deps/tclap/Makefile.in	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	deps/tclap/Makefile.in	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__include	deps/tclap/Makefile.in	/^am__include = @am__include@$/;"	m
am__installdirs	deps/tclap/Makefile.in	/^am__installdirs = "$(DESTDIR)$(libtclapincludedir)"$/;"	m
am__leading_dot	deps/tclap/Makefile.in	/^am__leading_dot = @am__leading_dot@$/;"	m
am__quote	deps/tclap/Makefile.in	/^am__quote = @am__quote@$/;"	m
am__strip_dir	deps/tclap/Makefile.in	/^am__strip_dir = `echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	deps/tclap/Makefile.in	/^am__tar = @am__tar@$/;"	m
am__untar	deps/tclap/Makefile.in	/^am__untar = @am__untar@$/;"	m
am__vpath_adj	deps/tclap/Makefile.in	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	deps/tclap/Makefile.in	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
argId	deps/tclap/ArgException.h	/^		std::string argId() const  $/;"	f	class:TCLAP::ArgException	typeref:typename:std::string
argMatches	deps/tclap/Arg.h	/^inline bool Arg::argMatches( const std::string& argFlag ) const$/;"	f	class:TCLAP::Arg	typeref:typename:bool
basename	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::basename( std::string& s )$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
basename	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::basename( std::string& s )$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
begin	deps/tclap/MultiArg.h	/^	const_iterator begin() const { return _values.begin(); }$/;"	f	class:TCLAP::MultiArg	typeref:typename:const_iterator
beginIgnoring	deps/tclap/Arg.h	/^		static void beginIgnoring() { ignoreRestRef() = true; }$/;"	f	class:TCLAP::Arg	typeref:typename:void
bindir	deps/tclap/Makefile.in	/^bindir = @bindir@$/;"	m
blankChar	deps/tclap/Arg.h	/^		static char blankChar() { return (char)7; }$/;"	f	class:TCLAP::Arg	typeref:typename:char
build_alias	deps/tclap/Makefile.in	/^build_alias = @build_alias@$/;"	m
builddir	deps/tclap/Makefile.in	/^builddir = @builddir@$/;"	m
check	deps/tclap/Makefile.in	/^check: check-am$/;"	t
check	deps/tclap/OptionalUnlabeledTracker.h	/^inline void OptionalUnlabeledTracker::check( bool req, const std::string& argName )$/;"	f	class:TCLAP::OptionalUnlabeledTracker	typeref:typename:void
check	deps/tclap/ValuesConstraint.h	/^bool ValuesConstraint<T>::check( const T& val ) const$/;"	f	class:TCLAP::ValuesConstraint	typeref:typename:bool
check	deps/tclap/XorHandler.h	/^inline int XorHandler::check( const Arg* a ) $/;"	f	class:TCLAP::XorHandler	typeref:typename:int
check-am	deps/tclap/Makefile.in	/^check-am: all-am$/;"	t
clean	deps/tclap/Makefile.in	/^clean: clean-am$/;"	t
clean-am	deps/tclap/Makefile.in	/^clean-am: clean-generic mostlyclean-am$/;"	t
clean-generic	deps/tclap/Makefile.in	/^clean-generic:$/;"	t
combinedSwitchesMatch	deps/tclap/SwitchArg.h	/^inline bool SwitchArg::combinedSwitchesMatch(std::string& combinedSwitches )$/;"	f	class:TCLAP::SwitchArg	typeref:typename:bool
common	deps/tclap/ZshCompletionOutput.h	/^		std::map<std::string, std::string> common;$/;"	m	class:TCLAP::ZshCompletionOutput	typeref:typename:std::map<std::string,std::string>
commonProcessing	deps/tclap/SwitchArg.h	/^inline void SwitchArg::commonProcessing()$/;"	f	class:TCLAP::SwitchArg	typeref:typename:void
const_iterator	deps/tclap/MultiArg.h	/^	typedef typename container_type::const_iterator const_iterator;$/;"	t	class:TCLAP::MultiArg	typeref:typename:container_type::const_iterator
container_type	deps/tclap/MultiArg.h	/^	typedef std::vector<T> container_type;	$/;"	t	class:TCLAP::MultiArg	typeref:typename:std::vector<T>
contains	deps/tclap/XorHandler.h	/^inline bool XorHandler::contains( const Arg* a )$/;"	f	class:TCLAP::XorHandler	typeref:typename:bool
convertDirectory	src/Converter.cpp	/^int Converter::convertDirectory(string& dirpath, bool recursive) {$/;"	f	class:Converter	typeref:typename:int
convertFile	src/Converter.cpp	/^int Converter::convertFile(string filepath) {$/;"	f	class:Converter	typeref:typename:int
ctags	deps/tclap/Makefile.in	/^ctags: CTAGS$/;"	t
datadir	deps/tclap/Makefile.in	/^datadir = @datadir@$/;"	m
datarootdir	deps/tclap/Makefile.in	/^datarootdir = @datarootdir@$/;"	m
deleteOnExit	deps/tclap/CmdLine.h	/^inline void CmdLine::deleteOnExit(Arg* ptr)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
deleteOnExit	deps/tclap/CmdLine.h	/^inline void CmdLine::deleteOnExit(Visitor* ptr)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
delimiter	deps/tclap/Arg.h	/^		static char delimiter() { return delimiterRef(); }$/;"	f	class:TCLAP::Arg	typeref:typename:char
delimiterRef	deps/tclap/Arg.h	/^		static char& delimiterRef() { static char delim = ' '; return delim; }$/;"	f	class:TCLAP::Arg	typeref:typename:char &
description	deps/tclap/ValuesConstraint.h	/^std::string ValuesConstraint<T>::description() const$/;"	f	class:TCLAP::ValuesConstraint	typeref:typename:std::string
distclean	deps/tclap/Makefile.in	/^distclean: distclean-am$/;"	t
distclean-am	deps/tclap/Makefile.in	/^distclean-am: clean-am distclean-generic distclean-tags$/;"	t
distclean-generic	deps/tclap/Makefile.in	/^distclean-generic:$/;"	t
distclean-tags	deps/tclap/Makefile.in	/^distclean-tags:$/;"	t
distdir	deps/tclap/Makefile.in	/^distdir: $(DISTFILES)$/;"	t
docdir	deps/tclap/Makefile.in	/^docdir = @docdir@$/;"	m
dumpEncodingType	src/Utils.cpp	/^void Utils::dumpEncodingType(AutoIt::TextEncodingDetect::Encoding encoding) {$/;"	f	class:Utils	typeref:typename:void
dvi	deps/tclap/Makefile.in	/^dvi: dvi-am$/;"	t
dvi-am	deps/tclap/Makefile.in	/^dvi-am:$/;"	t
dvidir	deps/tclap/Makefile.in	/^dvidir = @dvidir@$/;"	m
end	deps/tclap/MultiArg.h	/^	const_iterator end() const { return _values.end(); }$/;"	f	class:TCLAP::MultiArg	typeref:typename:const_iterator
error	deps/tclap/ArgException.h	/^		std::string error() const { return ( _errorText ); }$/;"	f	class:TCLAP::ArgException	typeref:typename:std::string
exec_prefix	deps/tclap/Makefile.in	/^exec_prefix = @exec_prefix@$/;"	m
failure	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::failure( CmdLineInterface& _cmd,$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
failure	deps/tclap/StdOutput.h	/^inline void StdOutput::failure( CmdLineInterface& _cmd,$/;"	f	class:TCLAP::StdOutput	typeref:typename:void
failure	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::failure( CmdLineInterface& _cmd,$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
flagStartChar	deps/tclap/Arg.h	/^		static char flagStartChar() { return TCLAP_FLAGSTARTCHAR; }$/;"	f	class:TCLAP::Arg	typeref:typename:char
flagStartString	deps/tclap/Arg.h	/^		static const std::string flagStartString() { return TCLAP_FLAGSTARTSTRING; }$/;"	f	class:TCLAP::Arg	typeref:typename:const std::string
forceRequired	deps/tclap/Arg.h	/^inline void Arg::forceRequired()$/;"	f	class:TCLAP::Arg	typeref:typename:void
getArgList	deps/tclap/CmdLine.h	/^inline std::list<Arg*>& CmdLine::getArgList()$/;"	f	class:TCLAP::CmdLine	typeref:typename:std::list<Arg * > &
getDelimiter	deps/tclap/CmdLine.h	/^inline char CmdLine::getDelimiter()$/;"	f	class:TCLAP::CmdLine	typeref:typename:char
getDescription	deps/tclap/Arg.h	/^inline std::string Arg::getDescription() const$/;"	f	class:TCLAP::Arg	typeref:typename:std::string
getExceptionHandling	deps/tclap/CmdLine.h	/^inline bool CmdLine::getExceptionHandling() const$/;"	f	class:TCLAP::CmdLine	typeref:typename:bool
getExitStatus	deps/tclap/ArgException.h	/^	int getExitStatus() const { return _estat; }$/;"	f	class:TCLAP::ExitException	typeref:typename:int
getFileSize	src/Utils.cpp	/^unsigned long long Utils::getFileSize(const string& filepath) {$/;"	f	class:Utils	typeref:typename:unsigned long long
getFlag	deps/tclap/Arg.h	/^inline const std::string& Arg::getFlag() const { return _flag; }$/;"	f	class:TCLAP::Arg	typeref:typename:const std::string &
getMessage	deps/tclap/CmdLine.h	/^inline std::string& CmdLine::getMessage()$/;"	f	class:TCLAP::CmdLine	typeref:typename:std::string &
getMutexList	deps/tclap/ZshCompletionOutput.h	/^inline std::string ZshCompletionOutput::getMutexList( CmdLineInterface& _cmd, Arg* a)$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:std::string
getName	deps/tclap/Arg.h	/^inline const std::string& Arg::getName() const { return _name; }$/;"	f	class:TCLAP::Arg	typeref:typename:const std::string &
getOutput	deps/tclap/CmdLine.h	/^inline CmdLineOutput* CmdLine::getOutput()$/;"	f	class:TCLAP::CmdLine	typeref:typename:CmdLineOutput *
getProgramName	deps/tclap/CmdLine.h	/^inline std::string& CmdLine::getProgramName()$/;"	f	class:TCLAP::CmdLine	typeref:typename:std::string &
getValue	deps/tclap/MultiArg.h	/^const std::vector<T>& MultiArg<T>::getValue() { return _values; }$/;"	f	class:TCLAP::MultiArg	typeref:typename:const std::vector<T> &
getValue	deps/tclap/MultiSwitchArg.h	/^inline int MultiSwitchArg::getValue() { return _value; }$/;"	f	class:TCLAP::MultiSwitchArg	typeref:typename:int
getValue	deps/tclap/SwitchArg.h	/^inline bool SwitchArg::getValue() { return _value; }$/;"	f	class:TCLAP::SwitchArg	typeref:typename:bool
getValue	deps/tclap/ValueArg.h	/^T& ValueArg<T>::getValue() { return _value; }$/;"	f	class:TCLAP::ValueArg	typeref:typename:T &
getVersion	deps/tclap/CmdLine.h	/^inline std::string& CmdLine::getVersion()$/;"	f	class:TCLAP::CmdLine	typeref:typename:std::string &
getXorHandler	deps/tclap/CmdLine.h	/^inline XorHandler& CmdLine::getXorHandler()$/;"	f	class:TCLAP::CmdLine	typeref:typename:XorHandler &
getXorList	deps/tclap/XorHandler.h	/^inline std::vector< std::vector<Arg*> >& XorHandler::getXorList() $/;"	f	class:TCLAP::XorHandler	typeref:typename:std::vector<std::vector<Arg * >> &
gotOptional	deps/tclap/OptionalUnlabeledTracker.h	/^		static void gotOptional() { alreadyOptionalRef() = true; }$/;"	f	class:TCLAP::OptionalUnlabeledTracker	typeref:typename:void
hasHelpAndVersion	deps/tclap/CmdLine.h	/^inline bool CmdLine::hasHelpAndVersion()$/;"	f	class:TCLAP::CmdLine	typeref:typename:bool
host_alias	deps/tclap/Makefile.in	/^host_alias = @host_alias@$/;"	m
html	deps/tclap/Makefile.in	/^html: html-am$/;"	t
htmldir	deps/tclap/Makefile.in	/^htmldir = @htmldir@$/;"	m
ignoreNameString	deps/tclap/Arg.h	/^		static const std::string ignoreNameString() { return "ignore_rest"; }$/;"	f	class:TCLAP::Arg	typeref:typename:const std::string
ignoreRest	deps/tclap/Arg.h	/^		static bool ignoreRest() { return ignoreRestRef(); }$/;"	f	class:TCLAP::Arg	typeref:typename:bool
ignoreRestRef	deps/tclap/Arg.h	/^		static bool& ignoreRestRef() { static bool ign = false; return ign; }$/;"	f	class:TCLAP::Arg	typeref:typename:bool &
includedir	deps/tclap/Makefile.in	/^includedir = @includedir@$/;"	m
info	deps/tclap/Makefile.in	/^info: info-am$/;"	t
info-am	deps/tclap/Makefile.in	/^info-am:$/;"	t
infodir	deps/tclap/Makefile.in	/^infodir = @infodir@$/;"	m
install	deps/tclap/Makefile.in	/^install: install-am$/;"	t
install-am	deps/tclap/Makefile.in	/^install-am: all-am$/;"	t
install-data	deps/tclap/Makefile.in	/^install-data: install-data-am$/;"	t
install-data-am	deps/tclap/Makefile.in	/^install-data-am: install-libtclapincludeHEADERS$/;"	t
install-dvi	deps/tclap/Makefile.in	/^install-dvi: install-dvi-am$/;"	t
install-exec	deps/tclap/Makefile.in	/^install-exec: install-exec-am$/;"	t
install-exec-am	deps/tclap/Makefile.in	/^install-exec-am:$/;"	t
install-html	deps/tclap/Makefile.in	/^install-html: install-html-am$/;"	t
install-info	deps/tclap/Makefile.in	/^install-info: install-info-am$/;"	t
install-libtclapincludeHEADERS	deps/tclap/Makefile.in	/^install-libtclapincludeHEADERS: $(libtclapinclude_HEADERS)$/;"	t
install-man	deps/tclap/Makefile.in	/^install-man:$/;"	t
install-pdf	deps/tclap/Makefile.in	/^install-pdf: install-pdf-am$/;"	t
install-ps	deps/tclap/Makefile.in	/^install-ps: install-ps-am$/;"	t
install-strip	deps/tclap/Makefile.in	/^install-strip:$/;"	t
install_sh	deps/tclap/Makefile.in	/^install_sh = @install_sh@$/;"	m
install_sh_DATA	deps/tclap/Makefile.in	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	deps/tclap/Makefile.in	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	deps/tclap/Makefile.in	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
installcheck	deps/tclap/Makefile.in	/^installcheck: installcheck-am$/;"	t
installcheck-am	deps/tclap/Makefile.in	/^installcheck-am:$/;"	t
installdirs	deps/tclap/Makefile.in	/^installdirs:$/;"	t
isDir	src/Utils.cpp	/^bool Utils::isDir(const string& path) {$/;"	f	class:Utils	typeref:typename:bool
isIgnoreable	deps/tclap/Arg.h	/^inline bool Arg::isIgnoreable() const { return _ignoreable; }$/;"	f	class:TCLAP::Arg	typeref:typename:bool
isRequired	deps/tclap/Arg.h	/^inline bool Arg::isRequired() const { return _required; }$/;"	f	class:TCLAP::Arg	typeref:typename:bool
isRequired	deps/tclap/MultiArg.h	/^bool MultiArg<T>::isRequired() const$/;"	f	class:TCLAP::MultiArg	typeref:typename:bool
isSet	deps/tclap/Arg.h	/^inline bool Arg::isSet() const$/;"	f	class:TCLAP::Arg	typeref:typename:bool
isValueRequired	deps/tclap/Arg.h	/^inline bool Arg::isValueRequired() const { return _valueRequired; }$/;"	f	class:TCLAP::Arg	typeref:typename:bool
istringstream	deps/tclap/Arg.h	/^typedef std::istringstream istringstream;$/;"	t	typeref:typename:std::istringstream
istringstream	deps/tclap/Arg.h	/^typedef std::istrstream istringstream;$/;"	t	typeref:typename:std::istrstream
iterator	deps/tclap/MultiArg.h	/^	typedef typename container_type::iterator iterator;$/;"	t	class:TCLAP::MultiArg	typeref:typename:container_type::iterator
lastCombined	deps/tclap/SwitchArg.h	/^inline bool SwitchArg::lastCombined(std::string& combinedSwitches ) $/;"	f	class:TCLAP::SwitchArg	typeref:typename:bool
libdir	deps/tclap/Makefile.in	/^libdir = @libdir@$/;"	m
libexecdir	deps/tclap/Makefile.in	/^libexecdir = @libexecdir@$/;"	m
libtclapinclude	deps/tclap/Makefile.am	/^libtclapincludedir = $(includedir)\/tclap$/;"	d
libtclapincludeHEADERS_INSTALL	deps/tclap/Makefile.in	/^libtclapincludeHEADERS_INSTALL = $(INSTALL_HEADER)$/;"	m
libtclapinclude_HEADERS	deps/tclap/Makefile.am	/^libtclapinclude_HEADERS = \\$/;"	m
libtclapinclude_HEADERS	deps/tclap/Makefile.in	/^libtclapinclude_HEADERS = \\$/;"	m
libtclapincludedir	deps/tclap/Makefile.am	/^libtclapincludedir = $(includedir)\/tclap$/;"	m
libtclapincludedir	deps/tclap/Makefile.in	/^libtclapincludedir = $(includedir)\/tclap$/;"	m
localedir	deps/tclap/Makefile.in	/^localedir = @localedir@$/;"	m
localstatedir	deps/tclap/Makefile.in	/^localstatedir = @localstatedir@$/;"	m
longID	deps/tclap/Arg.h	/^inline std::string Arg::longID( const std::string& valueId ) const$/;"	f	class:TCLAP::Arg	typeref:typename:std::string
longID	deps/tclap/MultiArg.h	/^std::string MultiArg<T>::longID(const std::string& val) const$/;"	f	class:TCLAP::MultiArg	typeref:typename:std::string
longID	deps/tclap/MultiSwitchArg.h	/^MultiSwitchArg::longID(const std::string& val) const$/;"	f	class:TCLAP::MultiSwitchArg	typeref:typename:std::string
longID	deps/tclap/UnlabeledMultiArg.h	/^std::string UnlabeledMultiArg<T>::longID(const std::string& val) const$/;"	f	class:TCLAP::UnlabeledMultiArg	typeref:typename:std::string
longID	deps/tclap/UnlabeledValueArg.h	/^std::string UnlabeledValueArg<T>::longID(const std::string& val) const$/;"	f	class:TCLAP::UnlabeledValueArg	typeref:typename:std::string
longID	deps/tclap/ValueArg.h	/^std::string ValueArg<T>::longID(const std::string& val) const$/;"	f	class:TCLAP::ValueArg	typeref:typename:std::string
main	src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
maintainer-clean	deps/tclap/Makefile.in	/^maintainer-clean: maintainer-clean-am$/;"	t
maintainer-clean-am	deps/tclap/Makefile.in	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-generic	deps/tclap/Makefile.in	/^maintainer-clean-generic:$/;"	t
makeDir	src/Utils.cpp	/^void Utils::makeDir(const string& path) {$/;"	f	class:Utils	typeref:typename:void
mandir	deps/tclap/Makefile.in	/^mandir = @mandir@$/;"	m
missingArgsException	deps/tclap/CmdLine.h	/^inline void CmdLine::missingArgsException()$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
mkdir_p	deps/tclap/Makefile.in	/^mkdir_p = @mkdir_p@$/;"	m
mkinstalldirs	deps/tclap/Makefile.in	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/config\/mkinstalldirs$/;"	m
mostlyclean	deps/tclap/Makefile.in	/^mostlyclean: mostlyclean-am$/;"	t
mostlyclean-am	deps/tclap/Makefile.in	/^mostlyclean-am: mostlyclean-generic$/;"	t
mostlyclean-generic	deps/tclap/Makefile.in	/^mostlyclean-generic:$/;"	t
msToSmiTimeString	src/Converter.cpp	/^wstring Converter::msToSmiTimeString(int ms) {$/;"	f	class:Converter	typeref:typename:wstring
nameStartString	deps/tclap/Arg.h	/^		static const std::string nameStartString() { return TCLAP_NAMESTARTSTRING; }$/;"	f	class:TCLAP::Arg	typeref:typename:const std::string
null_suggests_binary_	src/text_encoding_detect.h	/^  bool null_suggests_binary_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:bool
oldincludedir	deps/tclap/Makefile.in	/^oldincludedir = @oldincludedir@$/;"	m
openFile	src/Utils.cpp	/^void Utils::openFile(const string& filepath, wifstream& stream, bool verbose) {$/;"	f	class:Utils	typeref:typename:void
operator ==	deps/tclap/Arg.h	/^inline bool Arg::operator==(const Arg& a) const$/;"	f	class:TCLAP::Arg	typeref:typename:bool
operator ==	deps/tclap/UnlabeledMultiArg.h	/^bool UnlabeledMultiArg<T>::operator==(const Arg& a) const$/;"	f	class:TCLAP::UnlabeledMultiArg	typeref:typename:bool
operator ==	deps/tclap/UnlabeledValueArg.h	/^bool UnlabeledValueArg<T>::operator==(const Arg& a ) const$/;"	f	class:TCLAP::UnlabeledValueArg	typeref:typename:bool
parse	deps/tclap/CmdLine.h	/^inline void CmdLine::parse(int argc, const char * const * argv)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
parse	deps/tclap/CmdLine.h	/^inline void CmdLine::parse(std::vector<std::string>& args)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
pathExists	src/Utils.cpp	/^bool Utils::pathExists(const string& path) {$/;"	f	class:Utils	typeref:typename:bool
pdf	deps/tclap/Makefile.in	/^pdf: pdf-am$/;"	t
pdf-am	deps/tclap/Makefile.in	/^pdf-am:$/;"	t
pdfdir	deps/tclap/Makefile.in	/^pdfdir = @pdfdir@$/;"	m
pkgdatadir	deps/tclap/Makefile.in	/^pkgdatadir = $(datadir)\/@PACKAGE@$/;"	m
pkgincludedir	deps/tclap/Makefile.in	/^pkgincludedir = $(includedir)\/@PACKAGE@$/;"	m
pkglibdir	deps/tclap/Makefile.in	/^pkglibdir = $(libdir)\/@PACKAGE@$/;"	m
prefix	deps/tclap/Makefile.in	/^prefix = @prefix@$/;"	m
print	src/Converter.cpp	/^void Converter::print(string info, bool eol) {$/;"	f	class:Converter	typeref:typename:void
printArg	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::printArg(Arg* a)$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
printLongArg	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::printLongArg(Arg* a)$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
printOption	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::printOption(Arg* a, std::string mutex)$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
printShortArg	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::printShortArg(Arg* a)$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
processArg	deps/tclap/MultiArg.h	/^bool MultiArg<T>::processArg(int *i, std::vector<std::string>& args) $/;"	f	class:TCLAP::MultiArg	typeref:typename:bool
processArg	deps/tclap/MultiSwitchArg.h	/^inline bool MultiSwitchArg::processArg(int *i, std::vector<std::string>& args)$/;"	f	class:TCLAP::MultiSwitchArg	typeref:typename:bool
processArg	deps/tclap/SwitchArg.h	/^inline bool SwitchArg::processArg(int *i, std::vector<std::string>& args)$/;"	f	class:TCLAP::SwitchArg	typeref:typename:bool
processArg	deps/tclap/UnlabeledMultiArg.h	/^bool UnlabeledMultiArg<T>::processArg(int *i, std::vector<std::string>& args) $/;"	f	class:TCLAP::UnlabeledMultiArg	typeref:typename:bool
processArg	deps/tclap/UnlabeledValueArg.h	/^bool UnlabeledValueArg<T>::processArg(int *i, std::vector<std::string>& args) $/;"	f	class:TCLAP::UnlabeledValueArg	typeref:typename:bool
processArg	deps/tclap/ValueArg.h	/^bool ValueArg<T>::processArg(int *i, std::vector<std::string>& args)$/;"	f	class:TCLAP::ValueArg	typeref:typename:bool
program_transform_name	deps/tclap/Makefile.in	/^program_transform_name = @program_transform_name@$/;"	m
ps	deps/tclap/Makefile.in	/^ps: ps-am$/;"	t
ps-am	deps/tclap/Makefile.in	/^ps-am:$/;"	t
psdir	deps/tclap/Makefile.in	/^psdir = @psdir@$/;"	m
quoteSpecialChars	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::quoteSpecialChars( std::string& s )$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
removeChar	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::removeChar( std::string& s, char r)$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
reset	deps/tclap/Arg.h	/^inline void Arg::reset()$/;"	f	class:TCLAP::Arg	typeref:typename:void
reset	deps/tclap/CmdLine.h	/^inline void CmdLine::reset()$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
reset	deps/tclap/MultiArg.h	/^void MultiArg<T>::reset()$/;"	f	class:TCLAP::MultiArg	typeref:typename:void
reset	deps/tclap/MultiSwitchArg.h	/^MultiSwitchArg::reset()$/;"	f	class:TCLAP::MultiSwitchArg	typeref:typename:void
reset	deps/tclap/SwitchArg.h	/^inline void SwitchArg::reset()$/;"	f	class:TCLAP::SwitchArg	typeref:typename:void
reset	deps/tclap/ValueArg.h	/^void ValueArg<T>::reset()$/;"	f	class:TCLAP::ValueArg	typeref:typename:void
rtrim	src/Utils.cpp	/^void Utils::rtrim(string& s, const char c) {$/;"	f	class:Utils	typeref:typename:void
rtrim	src/Utils.cpp	/^void Utils::rtrim(wstring& s, const wchar_t c) {$/;"	f	class:Utils	typeref:typename:void
sbindir	deps/tclap/Makefile.in	/^sbindir = @sbindir@$/;"	m
setDelimiter	deps/tclap/Arg.h	/^		static void setDelimiter( char c ) { delimiterRef() = c; }$/;"	f	class:TCLAP::Arg	typeref:typename:void
setExceptionHandling	deps/tclap/CmdLine.h	/^inline void CmdLine::setExceptionHandling(const bool state)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
setOutput	deps/tclap/CmdLine.h	/^inline void CmdLine::setOutput(CmdLineOutput* co)$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
setRequireLabel	deps/tclap/Arg.h	/^inline void Arg::setRequireLabel( const std::string& s)$/;"	f	class:TCLAP::Arg	typeref:typename:void
sharedstatedir	deps/tclap/Makefile.in	/^sharedstatedir = @sharedstatedir@$/;"	m
shortID	deps/tclap/Arg.h	/^inline std::string Arg::shortID( const std::string& valueId ) const$/;"	f	class:TCLAP::Arg	typeref:typename:std::string
shortID	deps/tclap/MultiArg.h	/^std::string MultiArg<T>::shortID(const std::string& val) const$/;"	f	class:TCLAP::MultiArg	typeref:typename:std::string
shortID	deps/tclap/MultiSwitchArg.h	/^MultiSwitchArg::shortID(const std::string& val) const$/;"	f	class:TCLAP::MultiSwitchArg	typeref:typename:std::string
shortID	deps/tclap/UnlabeledMultiArg.h	/^std::string UnlabeledMultiArg<T>::shortID(const std::string& val) const$/;"	f	class:TCLAP::UnlabeledMultiArg	typeref:typename:std::string
shortID	deps/tclap/UnlabeledValueArg.h	/^std::string UnlabeledValueArg<T>::shortID(const std::string& val) const$/;"	f	class:TCLAP::UnlabeledValueArg	typeref:typename:std::string
shortID	deps/tclap/ValueArg.h	/^std::string ValueArg<T>::shortID(const std::string& val) const$/;"	f	class:TCLAP::ValueArg	typeref:typename:std::string
shortID	deps/tclap/ValuesConstraint.h	/^std::string ValuesConstraint<T>::shortID() const$/;"	f	class:TCLAP::ValuesConstraint	typeref:typename:std::string
spacePrint	deps/tclap/StdOutput.h	/^inline void StdOutput::spacePrint( std::ostream& os, $/;"	f	class:TCLAP::StdOutput	typeref:typename:void
srcdir	deps/tclap/Makefile.in	/^srcdir = @srcdir@$/;"	m
subdir	deps/tclap/Makefile.in	/^subdir = include\/tclap$/;"	m
substituteSpecialChars	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::substituteSpecialChars( std::string& s,$/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
sysconfdir	deps/tclap/Makefile.in	/^sysconfdir = @sysconfdir@$/;"	m
tags	deps/tclap/Makefile.in	/^tags: TAGS$/;"	t
target_alias	deps/tclap/Makefile.in	/^target_alias = @target_alias@$/;"	m
theDelimiter	deps/tclap/DocBookOutput.h	/^		char theDelimiter;$/;"	m	class:TCLAP::DocBookOutput	typeref:typename:char
theDelimiter	deps/tclap/ZshCompletionOutput.h	/^		char theDelimiter;$/;"	m	class:TCLAP::ZshCompletionOutput	typeref:typename:char
timeStringToMs	src/Converter.cpp	/^int Converter::timeStringToMs(const wstring& time) {$/;"	f	class:Converter	typeref:typename:int
toString	deps/tclap/Arg.h	/^inline std::string Arg::toString() const$/;"	f	class:TCLAP::Arg	typeref:typename:std::string
top_builddir	deps/tclap/Makefile.in	/^top_builddir = @top_builddir@$/;"	m
top_srcdir	deps/tclap/Makefile.in	/^top_srcdir = @top_srcdir@$/;"	m
transform	deps/tclap/Makefile.in	/^transform = $(program_transform_name)$/;"	m
trimFlag	deps/tclap/Arg.h	/^inline void Arg::trimFlag(std::string& flag, std::string& value) const$/;"	f	class:TCLAP::Arg	typeref:typename:void
typeDescription	deps/tclap/ArgException.h	/^		std::string typeDescription() const$/;"	f	class:TCLAP::ArgException	typeref:typename:std::string
uninstall	deps/tclap/Makefile.in	/^uninstall: uninstall-am$/;"	t
uninstall-am	deps/tclap/Makefile.in	/^uninstall-am: uninstall-libtclapincludeHEADERS$/;"	t
uninstall-libtclapincludeHEADERS	deps/tclap/Makefile.in	/^uninstall-libtclapincludeHEADERS:$/;"	t
usage	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::usage(CmdLineInterface& _cmd ) $/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
usage	deps/tclap/StdOutput.h	/^inline void StdOutput::usage(CmdLineInterface& _cmd ) $/;"	f	class:TCLAP::StdOutput	typeref:typename:void
usage	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::usage(CmdLineInterface& _cmd )$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
utf16_bom_be_	src/text_encoding_detect.cpp	/^const unsigned char *TextEncodingDetect::utf16_bom_be_ =$/;"	m	class:TextEncodingDetect	typeref:typename:const unsigned char *
utf16_bom_be_	src/text_encoding_detect.h	/^  static const unsigned char *utf16_bom_be_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:const unsigned char *
utf16_bom_le_	src/text_encoding_detect.cpp	/^const unsigned char *TextEncodingDetect::utf16_bom_le_ =$/;"	m	class:TextEncodingDetect	typeref:typename:const unsigned char *
utf16_bom_le_	src/text_encoding_detect.h	/^  static const unsigned char *utf16_bom_le_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:const unsigned char *
utf16_expected_null_percent_	src/text_encoding_detect.h	/^  int utf16_expected_null_percent_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:int
utf16_unexpected_null_percent_	src/text_encoding_detect.h	/^  int utf16_unexpected_null_percent_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:int
utf8_bom_	src/text_encoding_detect.cpp	/^const unsigned char *TextEncodingDetect::utf8_bom_ =$/;"	m	class:TextEncodingDetect	typeref:typename:const unsigned char *
utf8_bom_	src/text_encoding_detect.h	/^  static const unsigned char *utf8_bom_;$/;"	m	class:AutoIt::TextEncodingDetect	typeref:typename:const unsigned char *
value_type	deps/tclap/CmdLine.h	/^	typedef typename C::value_type value_type;$/;"	t	function:TCLAP::ClearContainer	typeref:typename:C::value_type
version	deps/tclap/DocBookOutput.h	/^inline void DocBookOutput::version(CmdLineInterface& _cmd) $/;"	f	class:TCLAP::DocBookOutput	typeref:typename:void
version	deps/tclap/StdOutput.h	/^inline void StdOutput::version(CmdLineInterface& _cmd) $/;"	f	class:TCLAP::StdOutput	typeref:typename:void
version	deps/tclap/ZshCompletionOutput.h	/^inline void ZshCompletionOutput::version(CmdLineInterface& _cmd)$/;"	f	class:TCLAP::ZshCompletionOutput	typeref:typename:void
visit	deps/tclap/HelpVisitor.h	/^		void visit() { (*_out)->usage(*_cmd); throw ExitException(0); }$/;"	f	class:TCLAP::HelpVisitor	typeref:typename:void
visit	deps/tclap/IgnoreRestVisitor.h	/^		void visit() { Arg::beginIgnoring();  }$/;"	f	class:TCLAP::IgnoreRestVisitor	typeref:typename:void
visit	deps/tclap/VersionVisitor.h	/^		void visit() { $/;"	f	class:TCLAP::VersionVisitor	typeref:typename:void
visit	deps/tclap/Visitor.h	/^		virtual void visit() { }$/;"	f	class:TCLAP::Visitor	typeref:typename:void
what	deps/tclap/ArgException.h	/^		const char* what() const throw() $/;"	f	class:TCLAP::ArgException	typeref:typename:const char *
wstr_replace	src/Utils.cpp	/^wstring& Utils::wstr_replace(wstring& subject, wstring search,$/;"	f	class:Utils	typeref:typename:wstring &
xorAdd	deps/tclap/CmdLine.h	/^inline void CmdLine::xorAdd( Arg& a, Arg& b )$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
xorAdd	deps/tclap/CmdLine.h	/^inline void CmdLine::xorAdd( std::vector<Arg*>& ors )$/;"	f	class:TCLAP::CmdLine	typeref:typename:void
xorSet	deps/tclap/Arg.h	/^inline void Arg::xorSet()$/;"	f	class:TCLAP::Arg	typeref:typename:void
~Arg	deps/tclap/Arg.h	/^inline Arg::~Arg() { }$/;"	f	class:TCLAP::Arg
~ArgException	deps/tclap/ArgException.h	/^		virtual ~ArgException() throw() { }$/;"	f	class:TCLAP::ArgException
~ArgTraits	deps/tclap/ArgTraits.h	/^	virtual ~ArgTraits() {}$/;"	f	struct:TCLAP::ArgTraits
~CmdLine	deps/tclap/CmdLine.h	/^inline CmdLine::~CmdLine()$/;"	f	class:TCLAP::CmdLine
~CmdLineInterface	deps/tclap/CmdLineInterface.h	/^		virtual ~CmdLineInterface() {}$/;"	f	class:TCLAP::CmdLineInterface
~CmdLineOutput	deps/tclap/CmdLineOutput.h	/^		virtual ~CmdLineOutput() {}$/;"	f	class:TCLAP::CmdLineOutput
~Constraint	deps/tclap/Constraint.h	/^		virtual ~Constraint() { ; }$/;"	f	class:TCLAP::Constraint
~StringLike	deps/tclap/ArgTraits.h	/^	virtual ~StringLike() {}$/;"	f	struct:TCLAP::StringLike
~StringLikeTrait	deps/tclap/ArgTraits.h	/^	virtual ~StringLikeTrait() {}$/;"	f	struct:TCLAP::StringLikeTrait
~TextEncodingDetect	src/text_encoding_detect.cpp	/^TextEncodingDetect::~TextEncodingDetect() {}$/;"	f	class:TextEncodingDetect
~ValueLike	deps/tclap/ArgTraits.h	/^	virtual ~ValueLike() {}$/;"	f	struct:TCLAP::ValueLike
~ValueLikeTrait	deps/tclap/ArgTraits.h	/^	virtual ~ValueLikeTrait() {}$/;"	f	struct:TCLAP::ValueLikeTrait
~ValuesConstraint	deps/tclap/ValuesConstraint.h	/^		virtual ~ValuesConstraint() {}$/;"	f	class:TCLAP::ValuesConstraint
~Visitor	deps/tclap/Visitor.h	/^		virtual ~Visitor() { }$/;"	f	class:TCLAP::Visitor
